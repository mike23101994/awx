---
- name: Install and Configure Datadog Agent on Windows
  hosts: all
  gather_facts: no
  tasks:
    - name: Check if folder exists
      win_stat:
        path: C:\Temp\datadog-agent-7-latest.amd64
      register: folder_status

    - name: Download Datadog Agent Installer if folder doesn't exist
      win_get_url:
        url: https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi
        dest: C:\Temp\datadog-agent-7-latest.amd64
      when: not folder_status.stat.exists
      register: download_result

    - name: Check if Datadog Agent is already installed
      win_shell: test-path "C:\Program Files\Datadog\Datadog Agent"
      register: installed_result

    - name: Debug installed_result
      debug:
        var: installed_result

    - name: Install Datadog Agent if not already installed
      win_command: msiexec.exe /i C:\Temp\datadog-agent-7-latest.amd64.msi /quiet APIKEY=9bb0fb16-2e71-4ce6-b6aa-43038d34fa13
      async: 1800
      poll: 0
      ignore_error: yes

    - name: Check the status of the Datadog Agent
      win_service:
        name: datadogagent
      register: datadog_service
    
    - name: Debug datadog_service
      debug:
        var: datadog_service

    - name: Wait for the Datadog Agent to start
      win_wait_for:
        path: "C:\\Program Files\\Datadog\\Datadog Agent\\bin\\agent.exe"
        timeout: 600  # Adjust the timeout as needed
      when: datadog_service.state != "running"

    - name: Remove the C:\Temp\datadog-agent.msi folder
      win_shell: Remove-Item -Path 'C:\Temp\datadog-agent.msi' -Recurse -Force
    
    - name: Capture Task Outputs
      set_fact:
        task_outputs: "{{ task_outputs | default([]) + [item.stdout_lines] }}"
      with_items:
        - "{{ folder_status }}"
        - "{{ download_result }}"
        - "{{ installed_result }}"
        - "{{ datadog_service }}"
      when: item.stdout_lines is defined and item.stdout_lines | length > 0
    
    - name: Print Task Outputs
      debug:
        var: task_outputs

    - name: Store Task Outputs in output.txt
      copy:
        content: "{{ task_outputs | join('\n') }}"
        dest: "C:/Ansible-Logs/output_{{ inventory_hostname }}.txt"
        remote_src: yes

  handlers:
    - name: Reboot if required
      win_reboot:
      when: datadog_service.changed

