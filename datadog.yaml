---
- name: Install and Configure Datadog Agent on Windows
  hosts: all
  gather_facts: no
  tasks:
    - name: Check if folder exists
      win_stat:
        path: C:\Temp\datadog-agent-7-latest.amd64.msi
      register: folder_status

    - name: Download Datadog Agent Installer if folder doesn't exist
      win_get_url:
        url: https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi
        dest: C:\Temp\datadog-agent-7-latest.amd64.msi
      when: not folder_status.stat.exists
      register: download_result

    - name: Check if Datadog Agent is already installed
      win_shell: test-path "C:\Program Files\Datadog\Datadog Agent"
      register: installed_result

    - name: Install Datadog Agent if not already installed
      win_command: msiexec.exe /i C:\Temp\datadog-agent-7-latest.amd64.msi /quiet APIKEY=9bb0fb16-2e71-4ce6-b6aa-43038d34fa13
      async: 1800
      poll: 0
      ignore_errors: yes
      register: agent_install

    - name: Check Datadog Agent Service Status
      win_shell: Get-Service -Name "Datadog Agent"
      register: datadog_service_status

    - name: Extract Status from Service Status
      set_fact:
        service_status_output: "{{ datadog_service_status.stdout_lines }}"

    - name: Determine DataDog Service Status
      set_fact:
        is_datadog_agent_running: "{{ service_status_output | join('\n') | regex_search('Running') is not none }}"

    - name: Wait for the Datadog Agent to start
      win_wait_for:
        path: "C:\\Program Files\\Datadog\\Datadog Agent\\bin\\agent.exe"
        timeout: 600  # Adjust the timeout as needed
      when: is_datadog_agent_running == false

    - name: Remove the C:\Temp\datadog-agent.msi folder
      win_shell: Remove-Item -Path 'C:\Temp\datadog-agent-7-latest.amd64.msi' -Recurse -Force
    

    - name: Debug All Variables
      debug:
        msg: "{{ item }}"
      loop:
        - { name: "Check if folder exists", value: "{{ folder_status }}" }
        - { name: "Download Datadog Agent Installer if folder doesn't exist", value: "{{ download_result }}" }
        - { name: "Check if Datadog Agent is already installed", value: "{{ installed_result }}" }
        - { name: "Install Datadog Agent if not already installed", value: "{{ agent_install }}" }
        - { name: "Check Datadog Agent Service Status", value: "{{ datadog_service_status }}" }
        - { name: "Extract Status from Service Status", value: "{{ service_status_output }}" }
        - { name: "Determine DataDog Service Status", value: "{{ is_datadog_agent_running }}" }


        # Add more variables to debug here
      register: debug_output

    - name: Create Destination Folder for Logs
      ansible.windows.win_file:
        path: C:\Ansible-Logs
        state: directory
      ignore_errors: yes 

    - name: Store Debug Output in output.txt
      copy:
        content: "{{ debug_output.results | map(attribute='msg') | join('\n') }}"
        dest: "C:/Ansible-Logs/output_{{ inventory_hostname }}_{{ lookup('pipe', 'python -c \"import datetime; print(datetime.datetime.now().strftime('%Y%m%d%H%M%S'))\"') }}.log"
        remote_src: yes

    
  handlers:
    - name: Reboot if required
      win_reboot:
      when: datadog_service.changed

