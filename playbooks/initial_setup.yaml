---
- name: Setup the windows host to run Ansible playbooks
  hosts: all 
  gather_facts: yes
  tasks:
    - name: Creat Folders
      ansible.windows.win_shell: |
        mkdir "C:\Temp"
        mkdir "C:\Ansible-Logs"
      ignore_errors: yes

    - name: Check if Python is Installed
      ansible.windows.win_command: 'where python'
      register: python_check_result
      ignore_errors: yes  # Ignore errors if 'where python' command fails

    - name: Install Python if not installed
      ansible.windows.win_shell: |
        $url = "https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe"
        $outputFile = "C:\Temp\python-3.8.10-amd64.exe"
        Invoke-WebRequest -Uri $url -OutFile $outputFile
        Start-Process -Wait -FilePath $outputFile -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1"
      when: "'INFO: Could not find files for the given pattern(s).' in python_check_result.stderr_lines"
      environment:
        PATH: "C:\Program Files\Python38"
      ignore_errors: no
      register: python_install_output

    - name: Install Boto3
      ansible.windows.win_shell: pip install boto3
      ignore_errors: yes
      register: boto3_install

    - name: Execute PowerShell to get datadog api key
      ansible.windows.win_shell: |
        $secretName = "DataDog_API_Key"
        $secret = Get-SECSecretValue -SecretId $secretName
        $apiKey = ConvertFrom-Json $secret.SecretString | Select-Object -ExpandProperty DataDog_API_Key
        $apiKeyFilePath = "C:\datadog_api.txt"
        $apiKey | Set-Content -Path $apiKeyFilePath
      register: retrieve_output
      ignore_errors: no
    
    - name: Get DataDog API Key from the file
      win_shell: Get-Content "C:\\datadog_api.txt"
      register: api_key_result 
      ignore_errors: no
    
    - name: Extract API Key from the output
      set_fact:
        api_key: "{{ api_key_result.stdout | regex_replace('\\r\\n$', '') | split('\n') | first }}"

    - name: Check if Datadog msi exists
      win_stat:
        path: C:\Temp\datadog-agent-7-latest.amd64.msi
      register: folder_status

    - name: Download Datadog Agent Installer if folder doesn't exist
      win_get_url:
        url: https://s3.amazonaws.com/ddagent-windows-stable/datadog-agent-7-latest.amd64.msi
        dest: C:\Temp\datadog-agent-7-latest.amd64.msi
      when: not folder_status.stat.exists
      register: download_result

    - name: Check if Datadog Agent is already installed
      win_shell: test-path "C:\Program Files\Datadog\Datadog Agent"
      register: installed_result

    - name: Datadog_agent_installed
      debug:
        var: installed_result

    - name: Install Datadog Agent if not already installed
      win_command: msiexec.exe /i C:\Temp\datadog-agent-7-latest.amd64.msi /quiet APIKEY={{ api_key }}
      ignore_errors: yes
      register: agent_install

    - name: Check Datadog Agent Service Status
      win_shell: Get-Service -Name "Datadog Agent"
      register: datadog_service_status

    - name: Extract Status from Service Status
      set_fact:
        service_status_output: "{{ datadog_service_status.stdout_lines }}"

    - name: Determine DataDog Service Status
      set_fact:
        is_datadog_agent_running: "{{ service_status_output | join('\n') | regex_search('Running') is not none }}"

    - name: Wait for the Datadog Agent to start
      win_wait_for:
        path: "C:\\Program Files\\Datadog\\Datadog Agent\\bin\\agent.exe"
        timeout: 600  
      when: is_datadog_agent_running == false

    - name: Remove .exe and .msi 
      ansible.windows.win_shell: |
        Remove-Item -Path 'C:\Temp\datadog-agent-7-latest.amd64.msi' -Recurse -Force
        Remove-Item -Path "C:\Temp\python-3.8.10-amd64.exe" -Recurse -Force
        Remove-Item -Path "C:\\datadog_api.txt" -Force
        Remove-Item -Path "C:\\Temp" -Force
      ignore_errors: yes
      register: removed_output

  handlers:
    - name: Reboot if required
      win_reboot:
      when: datadog_service.changed

- name: Debug All Variables
  hosts: all
  tasks:
    - name: Debug All Variables
      debug:
        msg: "{{ item }}"
      loop:
        - { name: "Check if Python is Installed", value: "{{ python_check_result }}" }
        - { name: "Install Python if not installed", value: "{{ python_install_output }}" }
        - { name: "Install Boto3", value: "{{ boto3_install }}" }
        - { name: "Check if Datadog msi exists", value: "{{ folder_status }}" }
        - { name: "Download Datadog Agent Installer if folder doesn't exist", value: "{{ download_result }}" }
        - { name: "Check if Datadog Agent is already installed", value: "{{ installed_result }}" }
        - { name: "Install Datadog Agent if not already installed", value: "{{ agent_install }}" }
        - { name: "Check Datadog Agent Service Status", value: "{{ datadog_service_status }}" }
        - { name: "Extract Status from Service Status", value: "{{ service_status_output }}" }
        - { name: "Determine DataDog Service Status", value: "{{ is_datadog_agent_running }}" }
      register: debug_output
      ignore_errors: yes

    - name: Store Debug Output in output.txt
      copy:
        content: "{{ debug_output.results | map(attribute='msg') | join('\n') }}"
        dest: "C:/Ansible-Logs/output_{{ inventory_hostname }}_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}.log"
        remote_src: yes


    