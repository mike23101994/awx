---
- name: Manage Application Server
  hosts: all
  gather_facts: no
  tasks:
    - name: Check AppServer Service Status
      win_shell: Get-Service | Where-Object { $_.DisplayName -eq "Every Angle Application Server" } | Select-Object DisplayName, Status
      register: service_status
      failed_when: false

    - name: Read Configuration File
      win_shell: |
        $configFile = "F:\Apps\AppServer\EveryAngle.Edgar.Service.exe.config"
        $configContent = [System.IO.File]::ReadAllText($configFile)
        $logFolderPattern = '<add key="LogFolder" value="([^"]+)"'
        $logFolderMatch = [regex]::Match($configContent, $logFolderPattern)
        
        if ($logFolderMatch.Success) {
          $logFolderValue = $logFolderMatch.Groups[1].Value
          Write-Host "LogFolder Value: $logFolderValue"
        } else {
          Write-Host "LogFolder Not Found in Configuration"
        }
      register: result
      failed_when: false

    - name: Stop Service from Services.msc
      win_service:
        name: Every Angle Application Server
        state: stopped
      register: stop_service_result
      failed_when: false

    - name: Check if Service is Running
      win_shell: Get-Service -Name "Every Angle Application Server" | Select-Object -ExpandProperty Status
      register: service_status_before
      failed_when: false

    - name: Move Log File
      win_shell: |
        $logFilePath = "F:\Data\AppServer\log\log-test\AppServerInstall.log"
        $newLogFolderPath = "F:\Data\AppServer\log"
        if (-not (Test-Path $logFilePath -PathType Leaf)) {
          Write-Host "Log file does not exist in the source location."
        } else {
          if (-not (Test-Path $newLogFolderPath -PathType Container)) {
            New-Item -Path $newLogFolderPath -ItemType Directory
          }
          Move-Item -Path $logFilePath -Destination $newLogFolderPath
        }
      register: move_log_result
      ignore_errors: yes
      failed_when: false

    - name: Update LogFolder
      win_shell: |
        $configFile = "F:\Apps\AppServer\EveryAngle.Edgar.Service.exe.config"
        $newLogFolderPath = "F:\Data\AppServer\log"
        [xml]$config = Get-Content $configFile
        $logFolderNode = $config.configuration.appSettings.add | Where-Object { $_.key -eq "LogFolder" }
        if ($logFolderNode -ne $null) {
          $logFolderNode.value = $newLogFolderPath
          $config.Save($configFile)
        }
      register: update_log_folder_result
      ignore_errors: yes
      failed_when: false

    - name: Read changed Log File Location
      win_shell: |
        $configFile = "F:\Apps\AppServer\EveryAngle.Edgar.Service.exe.config"
        $configContent = [System.IO.File]::ReadAllText($configFile)
        $logFolderPattern = '<add key="LogFolder" value="([^"]+)"'
        $logFolderMatch = [regex]::Match($configContent, $logFolderPattern)
        
        if ($logFolderMatch.Success) {
          $logFolderValue = $logFolderMatch.Groups[1].Value
          Write-Host "LogFolder Value: $logFolderValue"
        } else {
          Write-Host "LogFolder Not Found in Configuration"
        }
      register: new_result
      ignore_errors: yes
      failed_when: false

    - name: Start Service
      win_service:
        name: Every Angle Application Server
        state: started
      register: start_service_result
      failed_when: false

    - name: Check Service Status
      win_shell: Get-Service -Name "Every Angle Application Server" | Select-Object -ExpandProperty Status
      register: service_status_after
      failed_when: false


    - name: Debug All Variables
      debug:
        msg: "{{ item }}"
      loop:
        - { name: "Check AppServer Service Status", value: "{{ service_status }}" }
        - { name: "Read Configuration File", value: "{{ result }}" }
        - { name: "Stop Service from Services.msc", value: "{{ stop_service_result }}" }
        - { name: "Check if Service is Running", value: "{{ service_status_before }}" }
        - { name: "Move Log File", value: "{{ move_log_result }}" }
        - { name: "Update LogFolder", value: "{{ update_log_folder_result }}" }
        - { name: "Read changed Log File Location", value: "{{ new_result }}" }
        - { name: "Start Service", value: "{{ start_service_result }}" }
        - { name: "Check Service Status", value: "{{ service_status_after }}" }


        # Add more variables to debug here
      register: debug_output
      always: yes
      ignore_errors: yes

    - name: Create Destination Folder for Logs
      ansible.windows.win_file:
        path: C:\Ansible-Logs
        state: directory
      ignore_errors: yes 

    - name: Store Debug Output in output.txt
      copy:
        content: "{{ debug_output.results | map(attribute='msg') | join('\n') }}"
        dest: "C:/Ansible-Logs/output_{{ inventory_hostname }}_{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}.log"
        remote_src: yes
